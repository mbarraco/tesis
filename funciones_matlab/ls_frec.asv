function [Y, frecuencias] = ls_frec(data,Fs,nint,w_rango,mallado,armonic)
% ls_frec(data,Fs,num_intervalos,w_rango,mallado)  ENERPO
% Y (nint x w) con la norma del ajuste  menos la senhal.
% w_rango = [w_min w_max] son las frecuencias de corte para el analisis 
% data debe tener dimensiones: 1 x samples \n')

% frecuencias
frecuencias = linspace(w_rango(1),w_rango(2),mallado);
nw=length(frecuencias);
time = (1:size(data,2))./Fs;

Y = NaN(nint,length(frecuencias));% output
num_samples=floor(length(data)/nint); % cantidad de samples por intervalo
data_int=NaN(nint,num_samples);       % guardo cada intervalo de data en una matriz

for i=1:nint
    data_int(i,:)=data(num_samples*(i-1)+1:num_samples*i);
end

time_int = time(1:num_samples);      %tiempos para cada intervalos
for int=1:nint
	tic
	for i=1:length(frecuencias)-1;
		
		w = 2*pi*frecuencias(i) ;
		if (armonic == 1)
			A= [cos(w*time_int)' sin(w*time_int)'];
		elseif (armonic == 2)
			A= [cos(w*time_int)' sin(w*time_int)' cos(2*w*time_int)' sin(2*w*time_int)'];
		elseif (armonic == 3)
			A= [cos(w*time_int)' sin(w*time_int)' cos(2*w*time_int)' sin(2*w*time_int)' cos(3*w*time_int)' sin(3*w*time_int)'];
		end	
			s=data_int(int,:);
			coef= A\s';
			Y(int,i)=norm(A*coef-s');
		end
		toc
	end
	

end
                        
